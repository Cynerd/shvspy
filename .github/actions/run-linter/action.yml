name: Run linter
description: "Run a linter on all changed files"
inputs:
  lint_program_with_args:
    description: "Which program to run"
    required: true

runs:
  using: "composite"
  steps:
    - name: Setup CMake
      uses: ./.github/actions/cmake
      env:
        CC: clang-15
        CXX: clang++-15
      with:
        qt_version: 6.5.3
        use_qt6: ON
        modules: qtserialport qtwebsockets qtnetworkauth
        additional_cmake_args: -DCMAKE_GLOBAL_AUTOGEN_TARGET=ON -DCMAKE_AUTOGEN_ORIGIN_DEPENDS=OFF

    - uses: mjp41/workaround8649@c8550b715ccdc17f89c8d5c28d7a48eeff9c94a8
      if: runner.os == 'Linux'
      with:
        os: ubuntu-latest

    - name: Install ctcache
      run: |
        CTCACHE_REF=e70da77cb867d74ccadce3f3c5862fc9cf4d22a7
        curl --location "https://github.com/matus-chochlik/ctcache/archive/${CTCACHE_REF}.tar.gz" | tar --extract --to-stdout --gzip --file - "ctcache-${CTCACHE_REF}/clang-tidy-cache" | sudo tee /usr/bin/clang-tidy-cache > /dev/null
        sudo chmod +x /usr/bin/clang-tidy-cache
        echo CTCACHE_DIR='${{github.workspace}}/.ctcache' >> "$GITHUB_ENV"
      shell: bash

    - name: Generate timestamp
      run: echo "NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV
      shell: bash

    - name: Setup clang-tidy cache
      uses: actions/cache@v4
      with:
        key: ctcache-${{ github.job }}-${{ env.NOW }}
        path: ${{github.workspace}}/.ctcache
        restore-keys: ctcache-${{ github.job }}-

    - name: Build autogenerated stuff
      shell: bash
      run: cmake --build ${{github.workspace}}/build --parallel "$(nproc)" --target autogen

    - name: Copy compile_commands.json
      shell: bash
      run: cp build/compile_commands.json compile_commands.json

    - name: Run the linter
      shell: bash
      run: |
        BASE_REF="${{github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.event.before}}"
        git fetch --depth=1 origin "$BASE_REF"
        readarray -t CHANGED_FILES < <(git diff --name-only "$BASE_REF" | grep 'cpp$')
        if [[ "${#CHANGED_FILES[@]}" -eq 0 ]]; then
          echo "No changed cpp files."
          exit 0
        fi
        echo "Changed files:"
        printf '%s\n' "${CHANGED_FILES[@]}"
        printf '%s\n' "${CHANGED_FILES[@]}" | parallel --verbose --jobs "$(nproc)" --plus _=[{#}/{##}] ${{ inputs.lint_program_with_args }} {}
