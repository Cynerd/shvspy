
name: Build
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_linux:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install/cache ninja, libfuse, and Qt's dependencies
        uses: awalsh128/cache-apt-pkgs-action@v1.2.1
        with:
          packages: ninja-build libgl1-mesa-dev libpulse-dev libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-shape0 libxcb-util1 libxcb-xinerama0 libxkbcommon-x11-0 libfuse-dev
          version: 1.0

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          cache: true
          install-deps: false
          version: 6.4.2
          modules: qtserialport qtwebsockets qtmultimedia

      - name: Get app version
        run: |
          echo "VERSION=$(grep APP_VERSION shvspy/src/appversion.h | cut -d\" -f2)" >> "$GITHUB_ENV"

      - name: Get AppImageTool
        run: |
          curl --silent "https://api.github.com/repos/AppImage/AppImageKit/releases/latest" | jq -r '.assets[] | select(.name == "appimagetool-x86_64.AppImage").browser_download_url' | sudo xargs curl -L -o /opt/appimagetool-x86_64.AppImage --create-dirs --url
          sudo chmod +x /opt/appimagetool-x86_64.AppImage

      - name: Build AppImage
        run: |
          mkdir ./build
          pwd
          ./make-dist.sh --src-dir . --qt-dir "${Qt6_DIR}" --work-dir ./build --appimage-tool /opt/appimagetool-x86_64.AppImage

      - name: Save AppImage
        uses: actions/upload-artifact@v2
        with:
          name: shvspy-${{ env.VERSION }}-linux64.Appimage
          path: build/artifacts/shvspy-*-linux64.AppImage

      - name: Save gzip
        uses: actions/upload-artifact@v2
        with:
          name: shvspy-${{ env.VERSION }}-linux64.tgz
          path: build/artifacts/shvspy-*-linux64.tgz


  build_windows:
    runs-on: windows-2022
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Cache Libs
        id: cache-libs
        uses: actions/cache@v2
        with:
          path: |
            C:/msys64/mingw64/bin/libiconv-2.dll
            C:/msys64/mingw64/bin/libintl-8.dll
            C:/msys64/mingw64/bin/libxml2-2.dll
            C:/msys64/mingw64/bin/liblzma-5.dll
            C:/msys64/mingw64/bin/zlib1.dll
          key: ${{ runner.os }}-Libraries

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          cache: true
          install-deps: false
          version: 6.4.2
          modules: qtserialport qtwebsockets qtmultimedia
          host: 'windows'
          arch: 'win64_mingw'

      - name: Build
        run: |
          cmake.exe -G "MinGW Makefiles" -DBUILD_TESTING=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="$QT_DIR" -DCMAKE_INSTALL_PREFIX=. .
          mingw32-make.exe -j4
          mingw32-make.exe install
        shell: cmd

      - name: Get app version
        run: |
          echo "VERSION=$(grep APP_VERSION shvspy/src/appversion.h | cut -d\" -f2)" >> "$GITHUB_ENV"

      - name: Create installer
        run: |
          choco upgrade innosetup --no-progress
          "C:\Program Files (x86)\Inno Setup 6\iscc.exe" "/DVERSION=%VERSION%" "/DQT_DIR=%Qt6_Dir%"  shvspy/shvspy.iss
        shell: cmd

      - name: Save setup
        uses: actions/upload-artifact@v2
        with:
          name: shvspy-elektroline-${{ env.VERSION }}-setup.exe
          path: _inno\shvspy\shvspy-elektroline-${{ env.VERSION }}-setup.exe
